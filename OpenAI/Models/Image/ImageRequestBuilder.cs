using System.Net.Cache;
using System.Security.Cryptography;
using OpenAI.Entities.Image;

namespace OpenAI.Models.Image;

public sealed class ImageRequestBuilder
{
    private ImageRequest _request = new ImageRequest();

    public ImageRequestBuilder WithModel(ImageModelKind modelKind)
    {
        return WithModel(modelKind.GetValue());
    }

    public ImageRequestBuilder WithModel(string modelName)
    {
        _request.ModelName = modelName;
        return this;
    }

    public ImageRequestBuilder WithPrompt(string prompt)
    {
        _request.Prompt = prompt;
        return this;
    }

    public ImageRequestBuilder WithImagesCount(int count)
    {
        _request.ImagesCount = count;
        return this;
    }

    public ImageRequestBuilder WithQuality(DallE3Quality quality)
    {
        _request.Quality = quality.GetValue();
        return this;
    }

    public ImageRequestBuilder WithResponseFormat(ImageResponseFormat responseFormat)
    {
        _request.ResponseFormat = responseFormat.GetValue();
        return this;
    }

    public ImageRequestBuilder WithSize(DallE2Size size)
    {
        _request.Size = size.GetValue();
        return this;
    }

    public ImageRequestBuilder WithSize(DallE3Size size)
    {
        _request.Size = size.GetValue();
        return this;
    }

    public ImageRequestBuilder WithStyle(DallE3Style style)
    {
        _request.Style = style.GetValue();
        return this;
    }

    public ImageRequestBuilder WithUser(string userId)
    {
        _request.User = userId;
        return this;
    }

    public ImageRequest Build()
    {
        if(string.IsNullOrEmpty(_request.Prompt))
        {
            throw new OpenAIException("You must set a valid prompt.");
        }

        if(_request.ModelName == ImageModelKind.DALL_E_3.GetValue())
        {
            CheckRequestParameterForDallE3();
        }
        else
        {
            CheckRequestParameterForDallE2();
        }

        return _request;
    }

    private void CheckRequestParameterForDallE2()
    {
        if(_request.Prompt.Length > 1_000)
        {
            throw new OpenAIException("Promt length for Dall-E 2 must be 1.000 characters or less.");
        }

        if(_request.ImagesCount < 1 || _request.ImagesCount > 10)
        {
            throw new OpenAIException("Images generated by Dall-E 2 should a number betweend 1 to 10");
        }
    }

    private void CheckRequestParameterForDallE3()
    {
        if(_request.Prompt.Length > 4_000)
        {
            throw new OpenAIException("Prompt length for Dall-E 2 must be 4.000 characters or less.");
        }

        if(_request.ImagesCount != 1)
        {
            throw new OpenAIException("Dall-E 3 only generates one image per request.");
        }
    }
}